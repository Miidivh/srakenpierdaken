//ZAD 2.1//

n = 7 + 1
t[8] = 30
s = 8
while (	8/2 >= 1 ) and ( T[30] > T[4] )
	pomocnicza = T[8] 		//30 		
	T[8] = T[8/2] 			//30 = 4 			
	T[8 / 2] = pomocnicza(T[30]) 	//4 = 30 	
	8 = 8/2 			//8 = 4

[27,6,13,30,-3,-2,-3,4]	s = 4

while ( 4/2 >= 1 ) and ( T[30] > T[6] )
	pomocnicza = T[4] 		//30 		
	T[4] = T[4/2] 			//30 = 6 			
	T[4 / 2] = pomocnicza(T[30]) 	//6 = 30 	
	4 = 4/2 			//4 = 2

[27,30,13,6,-3,-2,-3,4] s = 2

while ( 2/2 >= 1 ) and ( T[30] > T[27] )
	pomocnicza = T[2] 		//30 		
	T[2] = T[2/2] 			//30 = 27 			
	T[2 / 2] = pomocnicza(T[30]) 	//27 = 30 	
	2 = 2/2 			//2 = 1

[30,27,13,6,-3,-2,-3,4] s = 1


//ZAD 2.2//

x = 6
d(x)


n ← n + 1 // n = 1
T[n] ← x  // T[1] = 6
s ← n	  // s = 1

//gowno

x = -4

n = 2
T[2] = -4
s = 2

//gowno

x = 12

n = 3
T[3] = 12
s = 3

dopóki ((3 div 2) ≥ 1) oraz (T[12] > T[6]) wykonuj
 	pom ← T[s]		//pom = 12
 	T[s] ← T[s div 2]	//12 = 6
 	T[s div 2] ← pom	//6 = 12
 	s ← s div 2 		//3/2

[12,-4,6] s = 1



x = 27

n = 4
T[4] = 27
s = 4

dopóki ((4 div 2) ≥ 1) oraz (T[27] > T[-4]) wykonuj
 	pom ← T[s]		//pom = 27
 	T[s] ← T[s div 2]	//27 = -4
 	T[s div 2] ← pom	//-4 = 27
 	s ← s div 2 		//4/2

[12,27,6,-4] s = 2


dopóki ((2 div 2) ≥ 1) oraz (T[27] > T[12]) wykonuj
 	pom ← T[s]		//pom = 27
 	T[s] ← T[s div 2]	//27 = 12
 	T[s div 2] ← pom	//12 = 17
 	s ← s div 2 		//2/2

[27,12,6,-4] s = 1

x = 26

n = 5
T[5] = 26
s = 5


dopóki ((5 div 2) ≥ 1) oraz (T[26] > T[12]) wykonuj
 	pom ← T[s]		//pom = 26
 	T[s] ← T[s div 2]	//26 = 12
 	T[s div 2] ← pom	//12 = 26
 	s ← s div 2 		//5/2

[27,26,6,-4,12] s = 2

x = 8

n = 6
T[6] = 8 
s = 6

dopóki ((6 div 2) ≥ 1) oraz (T[8] > T[6]) wykonuj
 	pom ← T[s]		//pom = 8
 	T[s] ← T[s div 2]	//8 = 6
 	T[s div 2] ← pom	//6 = 8
 	s ← s div 2 		//6/2

[27,26,8,-4,12,6] s = 3


//ZAD2.3//

x = 1

n = 1
T[1] = 1
s = 1

//gowno

x = 2

n = 2
T[2] = 2
s = 2

dopóki ((1) ≥ 1) oraz (T[2] > T[1]) wykonuj
 	pom ← T[s]		//pom = 2
 	T[s] ← T[s div 2]	//2 = 1
 	T[s div 2] ← pom	//1 = 2
 	s ← s div 2 		//1/2

[2,1]


x = 16

n = 16
T[16] = 16
s = 16

dopóki ((s div 2) ≥ 1) oraz (T[s] > T[s div 2]) wykonuj
 	pom ← T[s]
 	T[s] ← T[s div 2]
 	T[s div 2] ← pom
 	s ← s div 2

1025/2
512/2
256/2
128/2
64/2
32/2
16/2
8/2
4/2
2/2
1/2


//ZAD3.1//
F
P
P
F

//ZAD3.2//

128

<
 
9 * 16 ^ 0 = 9
10 * 16 ^ 1 = 160

F

----------

1 * 4 ^ 0 
1 * 4 ^ 1
1 * 4 ^ 2 
1 * 4 ^ 3 

= 85

>

127

F

----------

3 * 4 ^ 0 //3
0 * 4 ^ 1 //0
0 * 4 ^ 2 //0
3 * 4 ^ 3 //192

195

>

194

P

-----------

1 4 32 128

165

<

333

P


//ZAD3.3//

F
P
P
F
















	


	